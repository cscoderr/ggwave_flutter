// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings to GGWave.
class GGwave {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  GGwave(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  GGwave.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ggwave_Parameters ggwave_getDefaultParameters() {
    return _ggwave_getDefaultParameters();
  }

  late final _ggwave_getDefaultParametersPtr =
      _lookup<ffi.NativeFunction<ggwave_Parameters Function()>>(
          'ggwave_getDefaultParameters');
  late final _ggwave_getDefaultParameters = _ggwave_getDefaultParametersPtr
      .asFunction<ggwave_Parameters Function()>();

  int ggwave_init(
    ggwave_Parameters parameters,
  ) {
    return _ggwave_init(
      parameters,
    );
  }

  late final _ggwave_initPtr =
      _lookup<ffi.NativeFunction<ggwave_Instance Function(ggwave_Parameters)>>(
          'ggwave_init');
  late final _ggwave_init =
      _ggwave_initPtr.asFunction<int Function(ggwave_Parameters)>();

  void ggwave_free(
    int instance,
  ) {
    return _ggwave_free(
      instance,
    );
  }

  late final _ggwave_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ggwave_Instance)>>(
          'ggwave_free');
  late final _ggwave_free = _ggwave_freePtr.asFunction<void Function(int)>();

  int ggwave_encode(
    int instance,
    ffi.Pointer<ffi.Char> dataBuffer,
    int dataSize,
    int txProtocolId,
    int volume,
    ffi.Pointer<ffi.Char> outputBuffer,
    int query,
  ) {
    return _ggwave_encode(
      instance,
      dataBuffer,
      dataSize,
      txProtocolId,
      volume,
      outputBuffer,
      query,
    );
  }

  late final _ggwave_encodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ggwave_Instance,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Int32,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Int)>>('ggwave_encode');
  late final _ggwave_encode = _ggwave_encodePtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, int, int, int,
          ffi.Pointer<ffi.Char>, int)>();

  int ggwave_decode(
    int instance,
    ffi.Pointer<ffi.Char> dataBuffer,
    int dataSize,
    ffi.Pointer<ffi.Char> outputBuffer,
  ) {
    return _ggwave_decode(
      instance,
      dataBuffer,
      dataSize,
      outputBuffer,
    );
  }

  late final _ggwave_decodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ggwave_Instance, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('ggwave_decode');
  late final _ggwave_decode = _ggwave_decodePtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();
}

abstract class ggwave_SampleFormat {
  static const int GGWAVE_SAMPLE_FORMAT_UNDEFINED = 0;
  static const int GGWAVE_SAMPLE_FORMAT_U8 = 1;
  static const int GGWAVE_SAMPLE_FORMAT_I8 = 2;
  static const int GGWAVE_SAMPLE_FORMAT_U16 = 3;
  static const int GGWAVE_SAMPLE_FORMAT_I16 = 4;
  static const int GGWAVE_SAMPLE_FORMAT_F32 = 5;
}

abstract class ggwave_TxProtocolId {
  static const int GGWAVE_TX_PROTOCOL_AUDIBLE_NORMAL = 0;
  static const int GGWAVE_TX_PROTOCOL_AUDIBLE_FAST = 1;
  static const int GGWAVE_TX_PROTOCOL_AUDIBLE_FASTEST = 2;
  static const int GGWAVE_TX_PROTOCOL_ULTRASOUND_NORMAL = 3;
  static const int GGWAVE_TX_PROTOCOL_ULTRASOUND_FAST = 4;
  static const int GGWAVE_TX_PROTOCOL_ULTRASOUND_FASTEST = 5;
  static const int GGWAVE_TX_PROTOCOL_DT_NORMAL = 6;
  static const int GGWAVE_TX_PROTOCOL_DT_FAST = 7;
  static const int GGWAVE_TX_PROTOCOL_DT_FASTEST = 8;
  static const int GGWAVE_TX_PROTOCOL_CUSTOM_0 = 9;
  static const int GGWAVE_TX_PROTOCOL_CUSTOM_1 = 10;
  static const int GGWAVE_TX_PROTOCOL_CUSTOM_2 = 11;
  static const int GGWAVE_TX_PROTOCOL_CUSTOM_3 = 12;
  static const int GGWAVE_TX_PROTOCOL_CUSTOM_4 = 13;
  static const int GGWAVE_TX_PROTOCOL_CUSTOM_5 = 14;
  static const int GGWAVE_TX_PROTOCOL_CUSTOM_6 = 15;
  static const int GGWAVE_TX_PROTOCOL_CUSTOM_7 = 16;
  static const int GGWAVE_TX_PROTOCOL_CUSTOM_8 = 17;
  static const int GGWAVE_TX_PROTOCOL_CUSTOM_9 = 18;
}

final class ggwave_Parameters extends ffi.Struct {
  @ffi.Int()
  external int payloadLength;

  @ffi.Float()
  external double sampleRateInp;

  @ffi.Float()
  external double sampleRateOut;

  @ffi.Int()
  external int samplesPerFrame;

  @ffi.Float()
  external double soundMarkerThreshold;

  @ffi.Int32()
  external int sampleFormatInp;

  @ffi.Int32()
  external int sampleFormatOut;
}

typedef ggwave_Instance = ffi.Int;
