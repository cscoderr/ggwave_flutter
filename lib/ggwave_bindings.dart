// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings to GGWave.
class GGwave {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  GGwave(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  GGwave.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void ggwave_setLogFile(
    ffi.Pointer<ffi.Void> fptr,
  ) {
    return _ggwave_setLogFile(
      fptr,
    );
  }

  late final _ggwave_setLogFilePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'ggwave_setLogFile');
  late final _ggwave_setLogFile =
      _ggwave_setLogFilePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ggwave_Parameters ggwave_getDefaultParameters() {
    return _ggwave_getDefaultParameters();
  }

  late final _ggwave_getDefaultParametersPtr =
      _lookup<ffi.NativeFunction<ggwave_Parameters Function()>>(
          'ggwave_getDefaultParameters');
  late final _ggwave_getDefaultParameters = _ggwave_getDefaultParametersPtr
      .asFunction<ggwave_Parameters Function()>();

  int ggwave_init(
    ggwave_Parameters parameters,
  ) {
    return _ggwave_init(
      parameters,
    );
  }

  late final _ggwave_initPtr =
      _lookup<ffi.NativeFunction<ggwave_Instance Function(ggwave_Parameters)>>(
          'ggwave_init');
  late final _ggwave_init =
      _ggwave_initPtr.asFunction<int Function(ggwave_Parameters)>();

  void ggwave_free(
    int instance,
  ) {
    return _ggwave_free(
      instance,
    );
  }

  late final _ggwave_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ggwave_Instance)>>(
          'ggwave_free');
  late final _ggwave_free = _ggwave_freePtr.asFunction<void Function(int)>();

  int ggwave_encode(
    int instance,
    ffi.Pointer<ffi.Void> payloadBuffer,
    int payloadSize,
    int protocolId,
    int volume,
    ffi.Pointer<ffi.Void> waveformBuffer,
    int query,
  ) {
    return _ggwave_encode(
      instance,
      payloadBuffer,
      payloadSize,
      protocolId,
      volume,
      waveformBuffer,
      query,
    );
  }

  late final _ggwave_encodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ggwave_Instance,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Int32,
              ffi.Int,
              ffi.Pointer<ffi.Void>,
              ffi.Int)>>('ggwave_encode');
  late final _ggwave_encode = _ggwave_encodePtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Void>, int, int, int,
          ffi.Pointer<ffi.Void>, int)>();

  int ggwave_decode(
    int instance,
    ffi.Pointer<ffi.Void> waveformBuffer,
    int waveformSize,
    ffi.Pointer<ffi.Void> payloadBuffer,
  ) {
    return _ggwave_decode(
      instance,
      waveformBuffer,
      waveformSize,
      payloadBuffer,
    );
  }

  late final _ggwave_decodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ggwave_Instance, ffi.Pointer<ffi.Void>, ffi.Int,
              ffi.Pointer<ffi.Void>)>>('ggwave_decode');
  late final _ggwave_decode = _ggwave_decodePtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  int ggwave_ndecode(
    int instance,
    ffi.Pointer<ffi.Void> waveformBuffer,
    int waveformSize,
    ffi.Pointer<ffi.Void> payloadBuffer,
    int payloadSize,
  ) {
    return _ggwave_ndecode(
      instance,
      waveformBuffer,
      waveformSize,
      payloadBuffer,
      payloadSize,
    );
  }

  late final _ggwave_ndecodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ggwave_Instance, ffi.Pointer<ffi.Void>, ffi.Int,
              ffi.Pointer<ffi.Void>, ffi.Int)>>('ggwave_ndecode');
  late final _ggwave_ndecode = _ggwave_ndecodePtr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>, int)>();

  void ggwave_rxToggleProtocol(
    int protocolId,
    int state,
  ) {
    return _ggwave_rxToggleProtocol(
      protocolId,
      state,
    );
  }

  late final _ggwave_rxToggleProtocolPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int32, ffi.Int)>>(
          'ggwave_rxToggleProtocol');
  late final _ggwave_rxToggleProtocol =
      _ggwave_rxToggleProtocolPtr.asFunction<void Function(int, int)>();

  void ggwave_txToggleProtocol(
    int protocolId,
    int state,
  ) {
    return _ggwave_txToggleProtocol(
      protocolId,
      state,
    );
  }

  late final _ggwave_txToggleProtocolPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int32, ffi.Int)>>(
          'ggwave_txToggleProtocol');
  late final _ggwave_txToggleProtocol =
      _ggwave_txToggleProtocolPtr.asFunction<void Function(int, int)>();

  void ggwave_rxProtocolSetFreqStart(
    int protocolId,
    int freqStart,
  ) {
    return _ggwave_rxProtocolSetFreqStart(
      protocolId,
      freqStart,
    );
  }

  late final _ggwave_rxProtocolSetFreqStartPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int32, ffi.Int)>>(
          'ggwave_rxProtocolSetFreqStart');
  late final _ggwave_rxProtocolSetFreqStart =
      _ggwave_rxProtocolSetFreqStartPtr.asFunction<void Function(int, int)>();

  void ggwave_txProtocolSetFreqStart(
    int protocolId,
    int freqStart,
  ) {
    return _ggwave_txProtocolSetFreqStart(
      protocolId,
      freqStart,
    );
  }

  late final _ggwave_txProtocolSetFreqStartPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int32, ffi.Int)>>(
          'ggwave_txProtocolSetFreqStart');
  late final _ggwave_txProtocolSetFreqStart =
      _ggwave_txProtocolSetFreqStartPtr.asFunction<void Function(int, int)>();
}

abstract class ggwave_SampleFormat {
  static const int GGWAVE_SAMPLE_FORMAT_UNDEFINED = 0;
  static const int GGWAVE_SAMPLE_FORMAT_U8 = 1;
  static const int GGWAVE_SAMPLE_FORMAT_I8 = 2;
  static const int GGWAVE_SAMPLE_FORMAT_U16 = 3;
  static const int GGWAVE_SAMPLE_FORMAT_I16 = 4;
  static const int GGWAVE_SAMPLE_FORMAT_F32 = 5;
}

abstract class ggwave_ProtocolId {
  static const int GGWAVE_PROTOCOL_AUDIBLE_NORMAL = 0;
  static const int GGWAVE_PROTOCOL_AUDIBLE_FAST = 1;
  static const int GGWAVE_PROTOCOL_AUDIBLE_FASTEST = 2;
  static const int GGWAVE_PROTOCOL_ULTRASOUND_NORMAL = 3;
  static const int GGWAVE_PROTOCOL_ULTRASOUND_FAST = 4;
  static const int GGWAVE_PROTOCOL_ULTRASOUND_FASTEST = 5;
  static const int GGWAVE_PROTOCOL_DT_NORMAL = 6;
  static const int GGWAVE_PROTOCOL_DT_FAST = 7;
  static const int GGWAVE_PROTOCOL_DT_FASTEST = 8;
  static const int GGWAVE_PROTOCOL_MT_NORMAL = 9;
  static const int GGWAVE_PROTOCOL_MT_FAST = 10;
  static const int GGWAVE_PROTOCOL_MT_FASTEST = 11;
  static const int GGWAVE_PROTOCOL_CUSTOM_0 = 12;
  static const int GGWAVE_PROTOCOL_CUSTOM_1 = 13;
  static const int GGWAVE_PROTOCOL_CUSTOM_2 = 14;
  static const int GGWAVE_PROTOCOL_CUSTOM_3 = 15;
  static const int GGWAVE_PROTOCOL_CUSTOM_4 = 16;
  static const int GGWAVE_PROTOCOL_CUSTOM_5 = 17;
  static const int GGWAVE_PROTOCOL_CUSTOM_6 = 18;
  static const int GGWAVE_PROTOCOL_CUSTOM_7 = 19;
  static const int GGWAVE_PROTOCOL_CUSTOM_8 = 20;
  static const int GGWAVE_PROTOCOL_CUSTOM_9 = 21;
  static const int GGWAVE_PROTOCOL_COUNT = 22;
}

abstract class ggwave_Filter {
  static const int GGWAVE_FILTER_HANN = 0;
  static const int GGWAVE_FILTER_HAMMING = 1;
  static const int GGWAVE_FILTER_FIRST_ORDER_HIGH_PASS = 2;
}

final class ggwave_Parameters extends ffi.Struct {
  @ffi.Int()
  external int payloadLength;

  @ffi.Float()
  external double sampleRateInp;

  @ffi.Float()
  external double sampleRateOut;

  @ffi.Float()
  external double sampleRate;

  @ffi.Int()
  external int samplesPerFrame;

  @ffi.Float()
  external double soundMarkerThreshold;

  @ffi.Int32()
  external int sampleFormatInp;

  @ffi.Int32()
  external int sampleFormatOut;

  @ffi.Int()
  external int operatingMode;
}

typedef ggwave_Instance = ffi.Int;

const int GGWAVE_OPERATING_MODE_RX = 2;

const int GGWAVE_OPERATING_MODE_TX = 4;

const int GGWAVE_OPERATING_MODE_RX_AND_TX = 6;

const int GGWAVE_OPERATING_MODE_TX_ONLY_TONES = 8;

const int GGWAVE_OPERATING_MODE_USE_DSS = 16;

const int GGWAVE_MAX_INSTANCES = 4;
